package net.agileframes.forces.xyspace.trajectories;
import net.agileframes.core.forces.FuTrajectory;
import net.agileframes.core.forces.FuSpace;
import net.agileframes.forces.xyspace.XYSpace;
import net.agileframes.forces.xyspace.XYTransform;

public class XYCounterClockWiseBend extends FuTrajectory {
  private double radius = Double.NaN;
  private double endAngle = Double.NaN;
  public XYCounterClockWiseBend(double radius, double endAngle, XYTransform transform) {
    this(radius, endAngle, transform, radius/5, 2.5, 0.4, 0.1);
  }
  public XYCounterClockWiseBend(double radius, double endAngle, XYTransform transform,
                                double pilotAlpha, double pilotBeta, double speedGamma, double speedMu) {
    this.radius = radius;
    this.endAngle = enAngle;
    this.transform = transform;
    this.pilotAlpha = pilotAlpha;
    this.pilotBeta = pilotBeta;
    this.speedGamma = speedGamma;
    this.speedMu = speedMu;
    this.evolutionEnd = radius * endAngle;
    double endX = radius * Math.sin(endAngle);
    double endY = radius * (1 - Math.cos(endAngle));
    XYSpace endPoint = new XYSpace(endX, endY);
    XYSpace extPoint = new XYSpace(endX + Math.cos(endAngle), endY + Math.sin(endAngle));
    this.extension = endPoint.createConnectionPath(extPoint);
  }

  public FuSpace getTrajectPoint(double u) {
    if (u > evolutionEnd) { return transform.transform( extension.getConnectionPoint(u - evolutionEnd) ); }
    double x = radius * Math.sin(u / radius);
    double y = radius - radius * Math.cos(u / radius);
    return transform.transform(new XYSpace(x, y));
  }

  public double getProfileSpeed(double u) {
    if (u > evolutionEnd) { return 0; }
    return 1;
  }
}
