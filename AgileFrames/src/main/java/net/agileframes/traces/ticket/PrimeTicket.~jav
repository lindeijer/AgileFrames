package net.agileframes.traces.ticket;
import net.jini.core.transaction.Transaction;
import net.agileframes.core.traces.SemaphoreRemote;
import net.agileframes.core.traces.SceneAction;
import net.agileframes.core.traces.ReserveDeniedException;
import net.agileframes.core.traces.Ticket;

import java.rmi.*;

public class PrimeTicket extends TicketImplBase {
  public SemaphoreRemote semaphore;
  public int claim;
  public int threshold;
  public PrimeTicketRemote primeTicketRemote = null;

  // convention NAME , PARENT , character parameters.
  private PrimeTicket(SemaphoreRemote s) { this(s,1,1); }

  private PrimeTicket(SemaphoreRemote s,int claim) { this(s,claim,1); }

  private PrimeTicket(SemaphoreRemote s,int claim,int threshold) {
    this("anonymous&alone",null,s,claim,threshold);
  }

  public PrimeTicket(SceneAction scene_action,SemaphoreRemote s) {
    this("anonymous",scene_action,s,1,1);
  }

  public PrimeTicket(String name,SceneAction scene_action,
                     SemaphoreRemote s,int claim,int threshold) {
    super(name,scene_action);
    this.semaphore = s;
//    this.semName=semaphore.getName();
    this.claim = claim;
    this.threshold = threshold;
    scene_action.addTicket(this);  // ImplBase gets a painter.
  }

  /// implementation of Ticket //////////////////////////////////////////

  public synchronized boolean _attempt() {
    // state == INITIAL
    boolean result = false;
    try { result = semaphore.attempt(this); }
    catch (java.rmi.RemoteException e) {
      System.out.println("RemoteException in PrimeTicket: "+e.getMessage());
      e.printStackTrace();
      System.out.println("The system will quit");
      System.exit(0);
    }
    return result;
  }

  public synchronized boolean _reserve() {
    System.out.println("##1 _reserve() called in "+toString());
    primeTicketRemote = new PrimeTicketRemoteImpl(this);    
    // state == INITIAL
    boolean result = false;
    try { result = semaphore.reserve(this); }
    catch (java.rmi.RemoteException e) {
      System.out.println("RemoteException in PrimeTicket: "+e.getMessage());
      e.printStackTrace();
      System.out.println("The system will quit");
      System.exit(0);
    }
    return result;
  }

  public synchronized void _insist() {
    // state == BLOCKING
    while (getState() != ASSIGNED) {              // notify in assign.
      try  { this.wait(10000);
         //System.out.println(getIdentity() + "down . ");
      } // ten seconds
      catch (InterruptedException e) {// happens when finalize() is called...actor died
        System.out.println("PrimeTicket Interrupted :"+this.getName());
        try { semaphore.abort(this); }
        catch (java.rmi.RemoteException re) {
          System.out.println("RemoteException in PrimeTicket: "+re.getMessage());
          re.printStackTrace();
          System.out.println("The system will quit");
          System.exit(0);
        }
        break;
      }
      //System.out.println(getIdentity() + "up . ");
    }
  }

  public synchronized void _free() {
    // state == ASSIGNED
    try { semaphore.free(this); }
    catch (java.rmi.RemoteException e) {
      System.out.println("RemoteException in PrimeTicket: "+e.getMessage());
      e.printStackTrace();
      System.out.println("The system will quit");
      System.exit(0);
    }
  }

  /*
  public static final int INITIAL   = 0;
  public static final int RESERVING = 1;
  public static final int ASSIGNED  = 2;
  */
  public synchronized int _snip() {
    int snip = 0;
    try { snip = semaphore.snip(this); }
    catch (java.rmi.RemoteException e) {
      System.out.println("RemoteException in PrimeTicket: "+e.getMessage());
      e.printStackTrace();
      System.out.println("The system will quit");
      System.exit(0);
    }

    switch (getState()) {
      case INITIAL   : {
      switch (snip) {
        case INITIAL :   { return 0; }
        case RESERVING : { setState(RESERVING); return 0; }
        case ASSIGNED :  { System.out.println(toString() + "huh?"); System.exit(1); }
      }
      }
      case RESERVING : {
      switch (snip) {
        case INITIAL :   { System.out.println(toString() + "huh2?"); System.exit(1); }
        case RESERVING : { return 0; }
        case ASSIGNED :  { System.out.println(toString() + "huh3?"); System.exit(1); }
      }
      }
      case ASSIGNED  : return 1;
    }
    return 0;
  }

  public void _reserve(Transaction tx)
      throws ReserveDeniedException {
    System.out.println("##3 _reserve() called in "+toString());
    primeTicketRemote = new PrimeTicketRemoteImpl(this);
    // state == INITIAL
    try { semaphore.reserve(tx,this); }
    catch (java.rmi.RemoteException e) {
      System.out.println("RemoteException in PrimeTicket: "+e.getMessage());
      e.printStackTrace();
      System.out.println("The system will quit");
      System.exit(0);
    }
    // state remains INITIAL until discovered otherwise.
  }

  /**
  remember happends if the return is false.
  */
  public synchronized boolean _reserve(Ticket super_ticket,int i) {
    System.out.println("##2 _reserve(t,i) called in "+toString());
    return isState(ASSIGNED);  // this is false !!
  }

  ////////////////////////////////////////////////////////////////////////


  public void setAssigned(Ticket super_ticket,int i) { System.exit(0); }
  // setAssigned is called by semaphore
  public void setAssigned() {
    if (primeTicketRemote != null) {
      try { primeTicketRemote.setAssigned(); }
      catch (Exception e) { e.printStackTrace(); }
    } //else { System.out.println("setAssigned called while primeTicketRemote = null!"); }
  }
  // setAssignedByPTR is called by ticketRemote
  public synchronized void setAssignedByPTR() {
    //System.out.println(this.getName()+ " setAssignedByPTR called, tostring = "+ toString());
    if (isState(ASSIGNED)) {
       System.out.println(toString() + "assign by semaphore again?");
       System.exit(1);
    }
    setState(ASSIGNED);  // does callback, run is short!!
    this.notify();
  }

  public boolean equals(Object obj) {
    if (primeTicketRemote == null) { return super.equals(obj); }
    return primeTicketRemote.equals(((PrimeTicket)obj).primeTicketRemote);
  }

  /////// VIEW RELATED METHODS ////////////////////////////////////////

  /*
  protected TicketPainter _getTicketPainter() {
    return new PrimeTicketPainter(this);
  }
  */

}


