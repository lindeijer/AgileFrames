// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package net.agileframes.core.traces;

public final class Semaphore_Stub
    extends java.rmi.server.RemoteStub
    implements net.jini.core.transaction.server.TransactionParticipant, net.agileframes.core.traces.SemaphoreRemote, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void abort(net.agileframes.traces.ticket.PrimeTicket)"),
	new java.rmi.server.Operation("void abort(net.jini.core.transaction.server.TransactionManager, long)"),
	new java.rmi.server.Operation("boolean attempt(net.agileframes.traces.ticket.PrimeTicket)"),
	new java.rmi.server.Operation("void commit(net.jini.core.transaction.server.TransactionManager, long)"),
	new java.rmi.server.Operation("void free(net.agileframes.traces.ticket.PrimeTicket)"),
	new java.rmi.server.Operation("int prepare(net.jini.core.transaction.server.TransactionManager, long)"),
	new java.rmi.server.Operation("int prepareAndCommit(net.jini.core.transaction.server.TransactionManager, long)"),
	new java.rmi.server.Operation("boolean reserve(net.agileframes.traces.ticket.PrimeTicket)"),
	new java.rmi.server.Operation("void reserve(net.jini.core.transaction.Transaction, net.agileframes.traces.ticket.PrimeTicket)"),
	new java.rmi.server.Operation("int snip(net.agileframes.traces.ticket.PrimeTicket)")
    };
    
    private static final long interfaceHash = 4649841822940476409L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_abort_0;
    private static java.lang.reflect.Method $method_abort_1;
    private static java.lang.reflect.Method $method_attempt_2;
    private static java.lang.reflect.Method $method_commit_3;
    private static java.lang.reflect.Method $method_free_4;
    private static java.lang.reflect.Method $method_prepare_5;
    private static java.lang.reflect.Method $method_prepareAndCommit_6;
    private static java.lang.reflect.Method $method_reserve_7;
    private static java.lang.reflect.Method $method_reserve_8;
    private static java.lang.reflect.Method $method_snip_9;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_abort_0 = net.agileframes.core.traces.SemaphoreRemote.class.getMethod("abort", new java.lang.Class[] {net.agileframes.traces.ticket.PrimeTicket.class});
	    $method_abort_1 = net.jini.core.transaction.server.TransactionParticipant.class.getMethod("abort", new java.lang.Class[] {net.jini.core.transaction.server.TransactionManager.class, long.class});
	    $method_attempt_2 = net.agileframes.core.traces.SemaphoreRemote.class.getMethod("attempt", new java.lang.Class[] {net.agileframes.traces.ticket.PrimeTicket.class});
	    $method_commit_3 = net.jini.core.transaction.server.TransactionParticipant.class.getMethod("commit", new java.lang.Class[] {net.jini.core.transaction.server.TransactionManager.class, long.class});
	    $method_free_4 = net.agileframes.core.traces.SemaphoreRemote.class.getMethod("free", new java.lang.Class[] {net.agileframes.traces.ticket.PrimeTicket.class});
	    $method_prepare_5 = net.jini.core.transaction.server.TransactionParticipant.class.getMethod("prepare", new java.lang.Class[] {net.jini.core.transaction.server.TransactionManager.class, long.class});
	    $method_prepareAndCommit_6 = net.jini.core.transaction.server.TransactionParticipant.class.getMethod("prepareAndCommit", new java.lang.Class[] {net.jini.core.transaction.server.TransactionManager.class, long.class});
	    $method_reserve_7 = net.agileframes.core.traces.SemaphoreRemote.class.getMethod("reserve", new java.lang.Class[] {net.agileframes.traces.ticket.PrimeTicket.class});
	    $method_reserve_8 = net.agileframes.core.traces.SemaphoreRemote.class.getMethod("reserve", new java.lang.Class[] {net.jini.core.transaction.Transaction.class, net.agileframes.traces.ticket.PrimeTicket.class});
	    $method_snip_9 = net.agileframes.core.traces.SemaphoreRemote.class.getMethod("snip", new java.lang.Class[] {net.agileframes.traces.ticket.PrimeTicket.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public Semaphore_Stub() {
	super();
    }
    public Semaphore_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of abort(PrimeTicket)
    public void abort(net.agileframes.traces.ticket.PrimeTicket $param_PrimeTicket_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_abort_0, new java.lang.Object[] {$param_PrimeTicket_1}, 2919363619072655514L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_PrimeTicket_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of abort(TransactionManager, long)
    public void abort(net.jini.core.transaction.server.TransactionManager $param_TransactionManager_1, long $param_long_2)
	throws java.rmi.RemoteException, net.jini.core.transaction.UnknownTransactionException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_abort_1, new java.lang.Object[] {$param_TransactionManager_1, new java.lang.Long($param_long_2)}, 6453339918227979758L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_TransactionManager_1);
		    out.writeLong($param_long_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (net.jini.core.transaction.UnknownTransactionException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of attempt(PrimeTicket)
    public boolean attempt(net.agileframes.traces.ticket.PrimeTicket $param_PrimeTicket_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_attempt_2, new java.lang.Object[] {$param_PrimeTicket_1}, -2756677297461685070L);
		return ((java.lang.Boolean) $result).booleanValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_PrimeTicket_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readBoolean();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of commit(TransactionManager, long)
    public void commit(net.jini.core.transaction.server.TransactionManager $param_TransactionManager_1, long $param_long_2)
	throws java.rmi.RemoteException, net.jini.core.transaction.UnknownTransactionException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_commit_3, new java.lang.Object[] {$param_TransactionManager_1, new java.lang.Long($param_long_2)}, -4824188504637219834L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_TransactionManager_1);
		    out.writeLong($param_long_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (net.jini.core.transaction.UnknownTransactionException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of free(PrimeTicket)
    public void free(net.agileframes.traces.ticket.PrimeTicket $param_PrimeTicket_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_free_4, new java.lang.Object[] {$param_PrimeTicket_1}, 8214594910034411261L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_PrimeTicket_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of prepare(TransactionManager, long)
    public int prepare(net.jini.core.transaction.server.TransactionManager $param_TransactionManager_1, long $param_long_2)
	throws java.rmi.RemoteException, net.jini.core.transaction.UnknownTransactionException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_prepare_5, new java.lang.Object[] {$param_TransactionManager_1, new java.lang.Long($param_long_2)}, 6712869487572224562L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_TransactionManager_1);
		    out.writeLong($param_long_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (net.jini.core.transaction.UnknownTransactionException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of prepareAndCommit(TransactionManager, long)
    public int prepareAndCommit(net.jini.core.transaction.server.TransactionManager $param_TransactionManager_1, long $param_long_2)
	throws java.rmi.RemoteException, net.jini.core.transaction.UnknownTransactionException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_prepareAndCommit_6, new java.lang.Object[] {$param_TransactionManager_1, new java.lang.Long($param_long_2)}, -5362015305467031464L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_TransactionManager_1);
		    out.writeLong($param_long_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (net.jini.core.transaction.UnknownTransactionException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of reserve(PrimeTicket)
    public boolean reserve(net.agileframes.traces.ticket.PrimeTicket $param_PrimeTicket_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_reserve_7, new java.lang.Object[] {$param_PrimeTicket_1}, -1668693980937110981L);
		return ((java.lang.Boolean) $result).booleanValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_PrimeTicket_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readBoolean();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of reserve(Transaction, PrimeTicket)
    public void reserve(net.jini.core.transaction.Transaction $param_Transaction_1, net.agileframes.traces.ticket.PrimeTicket $param_PrimeTicket_2)
	throws java.rmi.RemoteException, net.agileframes.core.traces.ReserveDeniedException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_reserve_8, new java.lang.Object[] {$param_Transaction_1, $param_PrimeTicket_2}, -1024652777871399965L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Transaction_1);
		    out.writeObject($param_PrimeTicket_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (net.agileframes.core.traces.ReserveDeniedException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of snip(PrimeTicket)
    public int snip(net.agileframes.traces.ticket.PrimeTicket $param_PrimeTicket_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_snip_9, new java.lang.Object[] {$param_PrimeTicket_1}, 1224343317777603054L);
		return ((java.lang.Integer) $result).intValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_PrimeTicket_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		int $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readInt();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
