package net.agileframes.core.forces;
import net.agileframes.core.forces.FuSpace;
import net.agileframes.core.forces.FuSpace$FuPath;
import net.agileframes.core.forces.FuTransform;
import java.io.Serializable;

public class FuTrajectory implements Cloneable, Serializable {
  //--------------------------- Attributes -----------------------------
  private FuTrajectory afterTrajectory = null;
  private FuTrajectory beginTrajectory = null;
  protected FuTransform transform = null;
  protected FuPath extension = null;

  protected double evolutionEnd = Double.NaN;
  protected double pilotAlpha = Double.NaN;
  protected double pilotBeta = Double.NaN;
  protected double speedGamma = Double.NaN;
  protected double speedMu = Double.NaN;

  //--------------------------- Constructors ---------------------------
  public FuTrajectory () {}

  public FuTrajectory (FuTrajectory[] trajectories, FuTransform transform) {
    beginTrajectory = trajectories[0];
    evolutionEnd = 0;
    for (int i = 0; i < trajectories.length; i++) {
      evolutionEnd = evolutionEnd + trajectories[i].evolutionEnd;
      if (i < trajectories.length-1) { trajectories[i].afterTrajectory = trajectories[i+1]; }
      trajectories[i].transform = transform.transformT1T2(trajectories[i].transform, transform);
    }
    this.transform = transform;
  }

  //--------------------------- Methods --------------------------------
  private FuTrajectory getSubTrajectory(double u) {
    if ( u < 0) { return null; }
    FuTrajectory helper = beginTrajectory;
    while (helper != null) {
      if ( (u > helper.evolutionEnd ) && (helper.afterTrajectory != null)) {
        u = u - helper.evolutionEnd;
        helper = helper.afterTrajectory;
      } else { return helper.getSubTrajectory(u); }
    }
    return this;
  }

  public FuSpace getTrajectPoint (double u) {
    if ( u < 0) { return null; }
    FuTrajectory helper = beginTrajectory;
    while (helper != null) {
      if ( (u > helper.evolutionEnd ) && (helper.afterTrajectory != null)) {
        u = u - helper.evolutionEnd;
        helper = helper.afterTrajectory;
      } else { return helper.getTrajectPoint(u); }
    }
    return null;
  }
  public double getProfileSpeed(double u) {
    if ( u < 0) { return null; }
    FuTrajectory helper = beginTrajectory;
    while (helper != null) {
      if ( (u > helper.evolutionEnd ) && (helper.afterTrajectory != null)) {
        u = u - helper.evolutionEnd;
        helper = helper.afterTrajectory;
      } else { return helper.getProfileSpeed(u); }
    }
    return Double.NaN;
  }
  public double getEvolutionEnd() {  return evolutionEnd; }
  public double getPilotAlpha(double u) {  return getSubTrajectory(u).pilotAlpha; }
  public double getPilotBeta(double u) {  return getSubTrajectory(u).pilotBeta; }
  public double getSpeedGamma(double u) {  return getSubTrajectory(u).speedGamma; }
  public double getSpeedMu(double u) {  return getSubTrajectory(u).speedMu; }

  public String toString() {  return "\n" + this.toString(""); }
  private String toString(String indent) {
    String string = indent + "Trajectory = "+super.toString()+"; evolutionEnd = "+evolutionEnd;
    if (transform != null) { string += "; transform = "+this.transform.toString()+"\n"; } else { string +="; transform = null\n"; }
    if (beginTrajectory != null) {string += beginTrajectory.toString(indent + "     "); }
    if (afterTrajectory != null) {string += afterTrajectory.toString(indent); }
    return string;
  }

  public Object clone() throws CloneNotSupportedException {
    FuTrajectory clone = null;
    clone = (FuTrajectory)super.clone();
    if (beginTrajectory != null) { clone.beginTrajectory = (FuTrajectory)beginTrajectory.clone(); }
    if (afterTrajectory != null) { clone.afterTrajectory = (FuTrajectory)afterTrajectory.clone(); }
    if (transform != null) { clone.transform = (FuTransform)transform.clone(); }
    if (extension != null) { clone.extension = (FuPath)extension.clone(); }
    return clone;
  }
}
