package net.agileframes.core.forces;

import java.rmi.RemoteException;
import net.agileframes.core.forces.Manoeuvre;
import net.agileframes.core.forces.Sign;
import net.agileframes.core.traces.Actor;
import net.agileframes.core.traces.Ticket;
import java.io.Serializable;
import net.agileframes.forces.MachineIB;

public abstract class Move implements Cloneable, Serializable {
  public Move() throws RemoteException {}
  //------------------------ Attributes ---------------------------
  protected Manoeuvre manoeuvre = null;
  protected Ticket[] entryTickets;
  protected Sign[] signs;
  protected Sign finishedSign;
  protected Actor actor = null;

  //------------------------ Methods ------------------------------
  public void prepare() {
    try { actor.getMachine().prepare(manoeuvre); }
    catch (Exception e) { e.printStackTrace(); }
  }

  public void run(Ticket ticket) { run(new Ticket[]{ticket}); }
  public void run(Ticket[] tickets) {
    try { actor.getMachine().begin(manoeuvre); }
    catch (Exception e) { e.printStackTrace(); }

    entryTickets = new Ticket[tickets.length];
    for (int i = 0; i < tickets.length; i++) { entryTickets[i] = tickets[i]; }

    Thread moveScriptThread = new Thread("MoveScriptThread@"+this.toString()){
      public void run() { moveScript(); }
    };
    moveScriptThread.start();
  }

  public void execute() { moveScript(); }

  protected abstract void moveScript();
    // this method should contain the move-script. User-defined and specific for each move.
    // will be started by the run() method and has its own thread.

  public void watch(Flag[] flags) {
    boolean raised = false;
    for (int i = 0; i < flags.length; i++) {
      flags[i].addListener(this);
      if (!raised) { raised = flags[i].isRaised();}
    }
    while (!raised) {
      try{ synchronized(this) { this.wait();  }  }
      catch (Exception e) {
        System.out.println("Exception in Move.watch():"+e.getMessage());
        e.printStackTrace();
      }
      for (int i = 0; i < flags.length; i++) { if (!raised) { raised = flags[i].isRaised();} }
    }
  }
  public void watch(Flag flag) { watch(new Flag[] {flag}); }

  public Object clone() throws CloneNotSupportedException {
    Move clone = (Move)this.clone();
    clone.manoeuvre = (Manoeuvre)manoeuvre.clone();
    return clone;
  }

  public void setActor(Actor actor) { this.actor = actor; }


  //-------------------------------- Getters ------------------------------------------------
  public Sign getSign(int index) { return signs[index]; }
  public Sign getFinishedSign() { return finishedSign; }
  public Manoeuvre getManoeuvre() { return manoeuvre; }

}
