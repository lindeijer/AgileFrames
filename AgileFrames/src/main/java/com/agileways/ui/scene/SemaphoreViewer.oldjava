package com.agileways.ui.scene;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import net.agileframes.core.forces.FuTrajectory;
import net.agileframes.core.traces.SemaphoreRemote;
import com.agileways.ui.scene.SemaphoreProperties;

import java.rmi.server.UnicastRemoteObject;
//hallo
/**
 * Visualizes Semaphores with the colors indicating their capacities.
 * Semaphores will be placed in SceneViewer.
 *
 * @author Wierenga
 * @version 0.0.1
 */

public class SemaphoreViewer extends Component implements SemaphoreViewerRemote {
  SemaphoreRemote semaphore = null;
  SemaphoreProperties semProperties = null;
  public boolean changed = true;
  public boolean connectionLost = false;
  SceneViewer sceneViewer;

  /**
   * Constructor.
   */
  public SemaphoreViewer(SemaphoreRemote semaphore, SemaphoreProperties semProperties, SceneViewer sceneViewer) throws java.rmi.RemoteException {
    try { UnicastRemoteObject.exportObject(this); }
    catch (Exception e) { e.printStackTrace(); }
    this.validate();
    this.sceneViewer = sceneViewer;
    this.semaphore = semaphore;
    this.semProperties = semProperties;
  }

  /**
   * Paints sempaphore in right color on right position.
   * Red: capacity = 0; Green: capacity = 1; Yellow: capacity = 2
   * Orange: capacity = 3; Magenta: capacity = 4; Cyan: capacity = 5;
   * Blue: capacity > 5.
   */
  private int x, y, x2, y2, width, height;
  public void paint (Graphics g) {
    Graphics graph = g;
    if (graphics != null) { graph = graphics; }
    if (changed) {
      int capacity = 0;
      if (connectionLost) { capacity = -1; }
      else {
        try {
          capacity = semaphore.getCapacity();
        } catch (java.rmi.RemoteException e) {
          connectionLost = true;
          capacity = -1;
        }
      }

      switch (capacity) {
        case -1: graph.setColor(Color.lightGray);break;
        case 0:graph.setColor(Color.red);break;
        case 1:graph.setColor(Color.green);break;
        case 2:graph.setColor(Color.yellow);break;
        case 3:graph.setColor(Color.orange);break;
        case 4:graph.setColor(Color.magenta);break;
        case 5:graph.setColor(Color.cyan);break;
        default:graph.setColor(Color.blue);break;
      }

      double xScale = sceneViewer.getXScale();
      double yScale = sceneViewer.getYScale();
      x = (int)(semProperties.x * xScale);
      y = (int)(semProperties.y * yScale);
      x2 = (int)(semProperties.x * xScale - semProperties.width * xScale/2);
      y2 = (int)(semProperties.y * yScale - semProperties.height * yScale/2);
      width = (int)(semProperties.width * xScale);
      height = (int)(semProperties.height * yScale);
//      System.out.println("semViewer: x="+x+"  y="+y+"  x2="+x2+"  y2="+y2+"  w="+width+"  h="+height+"  xscale="+xScale+"  yScale="+yScale);

      if (semProperties.shape == 0) {
        graph.fillRect(x, y, width, height);
        graph.setColor(Color.black);
        graph.drawRect(x, y, width, height);
        changed = false;
      } else {
        graph.fillOval(x2, y2, width, height);
        graph.setColor(Color.black);
        graph.drawOval(x2, y2, width, height);
        changed = false;
      }
    }
  }

  private Graphics graphics = null;
  public void setGraphics(Graphics g) {
    this.graphics = g;
  }


  /**
   * Redraws Semaphore. Called when semaphore changed capacity (color).
   */
  public void modelChanged() throws java.rmi.RemoteException {
    changed = true;
    sceneViewer.modelChanged();
  }

  /**
   * Repaints SceneViewer.
   */
  public void repaint(){
    //empty!
  }

}