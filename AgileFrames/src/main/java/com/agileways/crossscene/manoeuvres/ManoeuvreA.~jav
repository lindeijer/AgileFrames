package com.agileways.crossscene.manoeuvres;
import net.agileframes.core.forces.Manoeuvre;
import com.agileways.crossscene.CrossParameters;
import net.agileframes.core.forces.FuTrajectory;
import net.agileframes.forces.flags.*;
import net.agileframes.forces.precautions.*;
import net.agileframes.core.forces.Flag;
import net.agileframes.core.forces.Precaution;
import net.agileframes.forces.xyaspace.trajectories.GoStraight;
import net.agileframes.forces.xyaspace.XYATransform;

public class ManoeuvreA extends Manoeuvre {

  public ManoeuvreA() {
    System.out.println("Constructor ManoeuvreA = "+this.toString());
    //-------------- Defining Generic Parameters ---------------------
    this.maxSpeed = CrossParameters.MAX_SPEED;
    this.maxDeceleration = CrossParameters.MAX_DECELERATION;
    this.maxAcceleration = CrossParameters.MAX_ACCELERATION;
    this.maxDeviation = CrossParameters.MAX_DEVIATION;
    this.cycleTime = CrossParameters.CYCLE_TIME;
    //-------------- Defining Trajectory -----------------------------
    FuTrajectory[] compTraj = new FuTrajectory[1];
    compTraj[0] = new GoStraight(CrossParameters.LENGTH_PARK_A, XYATransform.IDENTITY);
    trajectory = new FuTrajectory(compTraj, XYATransform.IDENTITY);
    //--------------- Defining Flags ---------------------------------
    Flag startFlag = new StartedFlag(this);
    Flag passedFlag = new PassedFlag(this, trajectory.getEvolutionEnd() * 0.8);
    Flag finishedFlag = new FinishedFlag(this);
    this.flags = new Flag[] {startFlag, passedFlag, finishedFlag};
    //--------------- Defining Precautions ---------------------------
    this.precautions = new Precaution[] {};
  }
}